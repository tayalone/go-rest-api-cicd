name: Go Unit Test

on:
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # - name: Set color
      #   id: random-color-generator
      #   run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
        
      # - name: Get color
      #   run: echo "The selected color is ${{ steps.random-color-generator.outputs.SELECTED_COLOR }}"

      - name: List changed files
        id: list_files
        run: |
          api_url=$(jq -r .pull_request.url $GITHUB_EVENT_PATH)
          changed_files=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $api_url/files | jq -r '.[].filename')
          echo "Changed files:"
          IFS=$'\n'
          for file in $changed_files; do
            echo "$file"
          done

          
      # - name: Install dependencies
      #   run: go get .

      # - name: Build
      #   run: go build -v ./...

      # - name: Test with Coverage
      #   run: go test -v -coverprofile=coverage_dev.txt -covermode=atomic ./...

      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: coverage_dev.txt
      #     token: ${{ secrets.CODECOV_TOKEN }}


# name: Get File Changes
# on:
#   pull_request:
#     types:
#       - opened
#       - synchronize

# jobs:
#   file-changes:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Get File Changes
#         uses: tj-actions/changed-files@v36
#         id: file-changes
#         with:
#           compareWith: develop
  
#       - name: List all changed files
#         id: list-all-changed-files
#         run: |
#           pattern=".*_test\.go"
#           files=()
#           for file in ${{ steps.file-changes.outputs.all_changed_files }}; do
#             if [[ $file =~ $pattern ]]; then
#                 dir=$(dirname "$file")
#                 dir=${dir#/}
#                 dir="./$dir"
#                 files+=("$dir")
#             fi
#           done
#           testingFile=$(IFS=' '; echo "${files[*]}")
#           echo "::set-output name=testingFile::$testingFile"

#       - name: Print Testing Dir
#         run: |
#           echo "Testing directory: ${{ steps.list-all-changed-files.outputs.testingFile }}"
    

// Code generated by mockery v2.29.0. DO NOT EDIT.

package port

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/tayalone/go-rest-api-cicd/book/entity"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *MockRepository) GetByID(id uint) (entity.BookEntity, error) {
	ret := _m.Called(id)

	var r0 entity.BookEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.BookEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.BookEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.BookEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
